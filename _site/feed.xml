<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>by Fellipe Brito about Ruby, Clojure, VIM and an Engineer&#39;s life</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 29 Dec 2015 10:01:05 +0000</pubDate>
    <lastBuildDate>Tue, 29 Dec 2015 10:01:05 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Dynamic browser searching a yanked text in VIM from a vagrant box</title>
        <description>&lt;p&gt;I hate to use the mouse. Not only because I want to show off my abilities with the keyboard everytime a new fellow developer comes over my desk but mainly because it slows me down. I‚Äôve invested some time in the last two years to get my hands as far away from the mouse as possible. Even more than slowing me down, the movement from keyboard to mouse and back to the keyboard can be harmful to my wrists, but it is another story.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I like to use the term ‚ÄúI‚Äôm in the matrix‚Äù when I‚Äôm coding. Because this is how I feel, and also because everyone else understands I‚Äôm with my terminal in full-screen mode and notifications turned off. The problem is that ‚Äúto write code‚Äù is not the main task of a developers‚Äô life. We do not like to admit, but we spend a lot of time looking for an answer to dumb questions and reading through APIs that we‚Äôve already read before but we just did not memorize it. This is another thing that bothers me, the idea that I do that at least 20 times every day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open terminal&lt;/li&gt;
  &lt;li&gt;tmux&lt;/li&gt;
  &lt;li&gt;vim&lt;/li&gt;
  &lt;li&gt;start coding&lt;/li&gt;
  &lt;li&gt;how do I do‚Ä¶ question&lt;/li&gt;
  &lt;li&gt;alt + tab&lt;/li&gt;
  &lt;li&gt;chrome&lt;/li&gt;
  &lt;li&gt;google/github/stackoverflow&lt;/li&gt;
  &lt;li&gt;ctrl + v&lt;/li&gt;
  &lt;li&gt;get answers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are so many steps - mouse interactions and keystrokes - in the whole process I described above that if I only try to make a simple math: &lt;strong&gt;( ( keystrokes + mouse clicks ) * 20 )&lt;/strong&gt; I will start to get mad at me! It is A LOT of time lost, and as once Bruce Lee said:
&amp;gt;&lt;em&gt;‚ÄúIf you love life, don‚Äôt waste time, for time is what life is made up of.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-bothers-memarkdown&quot;&gt;what-bothers-me.markdown&lt;/h3&gt;

&lt;p&gt;I‚Äôve seen some folks that have this practice of creating a simple markdown file somewhere so they can keep track of everything that bothers them but is not a ‚Äúmust to be fixed now‚Äù thing. I like this practice, so I have an alias on my VIM that opens this file for me with two keystrokes. It was in this file that I saved the quote &lt;em&gt;‚ÄúI hate to use the mouse to copy text from vim and then alt-tab to Chrome every time I want to look for something‚Äù&lt;/em&gt;. It was there, saved as a small thorn in my finger. Every time I went through this process I felt the pain. Two days ago I watched 25% of a youtube video where the developer had an idea for his emacs. So before I finish watching, I thought: ‚ÄúOk, I will try to fix this issue myself, and later on I come back to see how he did it‚Äù. So here we go.&lt;/p&gt;

&lt;h3 id=&quot;tldr---ok-code-starts-here&quot;&gt;TLDR?! - Ok, code starts here‚Ä¶&lt;/h3&gt;

&lt;h4 id=&quot;expect&quot;&gt;Expect&lt;/h4&gt;
&lt;p&gt;First of all, you must have expect installed in your unix. &lt;em&gt;‚ÄúOH, come on, you do not know what is expect?‚Äù&lt;/em&gt;. Dude, go for it here: &lt;a href=&quot;http://www.admin-magazine.com/Articles/Automating-with-Expect-Scripts&quot; target=&quot;_blank&quot;&gt;Using Expect Scripts to Automate Tasks&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;automate-ssh-access-to-your-computer-from-vagrant&quot;&gt;Automate SSH access to your computer from vagrant&lt;/h4&gt;
&lt;p&gt;My personal computer is dumb. It does not have GitHub keys, Ruby, MySQL or any other ‚Äúdev stuff‚Äù. The only tool this computer has is a vagrant box (or some boxes). There, inside my vagrant is where I‚Äôm happy. The problem is that this vagrant box does not have access to my browser, file preview and other apps that I use.&lt;/p&gt;

&lt;p&gt;My plan was simple: I‚Äôd like to &lt;strong&gt;yank a text on vim, execute few keystrokes and then an automated script would open my browser and search for this text in google&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you want to have an executable file, you should start it with a header that gives it some information about how it should be executed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/expect -f&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use: browser_search.sh &amp;lt;query-to-be-searched&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;QUERY &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that I have the query I want to search as my argument, and matrix know it should use expect -f, it is time to ssh back into my main computer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;spawn ssh username@hostname
expect &lt;span class=&quot;s2&quot;&gt;&amp;quot;Password: &amp;quot;&lt;/span&gt;
send &lt;span class=&quot;s2&quot;&gt;&amp;quot;your-password\r&amp;quot;&lt;/span&gt;
expect &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ &amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Look how amazing &lt;em&gt;expect&lt;/em&gt; is!&lt;/p&gt;

&lt;p&gt;[H[Jspawn ssh fellipebrito@192.168.0.2
Last login: Mon Dec 28 21:07:10 2015 from 192.168.0.2
Fellipes-MacBook-Air:~ fellipebrito$ open https://www.google.com/#q={:target=_blank}
Fellipes-MacBook-Air:~ fellipebrito$&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;send &lt;span class=&quot;s2&quot;&gt;&amp;quot;open https://www.google.com/#q=${QUERY}\r&amp;quot;&lt;/span&gt;
expect &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ &amp;quot;&lt;/span&gt;
send &lt;span class=&quot;s2&quot;&gt;&amp;quot;exit\r&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The whole script is on this &lt;a href=&quot;https://gist.github.com/fellipebrito/e35f976c3d952d6f4714&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can copy/download/modify it and then move into your /bin/&lt;file_name&gt;.sh directory. Do not forget to give it 755 permission so it looks like that:&lt;/file_name&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root &lt;span class=&quot;m&quot;&gt;259&lt;/span&gt; Mar &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; 19:21 /bin/browser_search.sh*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;vim-alias---how-to-copy-yanked-lines-in-vims-command-line&quot;&gt;Vim alias - how to copy yanked lines in VIM‚Äôs command line&lt;/h4&gt;

&lt;p&gt;Now that I have this script I have one more challenge, I want to yank a text and with two or three keystrokes send it to the terminal?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;map &amp;lt;Leader&amp;gt;bs :!browser_search.sh &amp;lt;C-r&amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;map &amp;lt;Leader&amp;gt;bs &lt;/code&gt; is defining my keystroke.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:!browser_search.sh &lt;/code&gt; tells VIM that it should execute this command on the command line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&quot;&lt;/code&gt; is the command to paste the text which is yanked on the command line. And finally the &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; is the &lt;enter&gt; key.&lt;/enter&gt;&lt;/p&gt;

&lt;p&gt;It works very well, and my plan in the future is to improve it so I can search not only on Google but define if I want to search directly in one specific place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gifyu.com/images/dynamic-browser-search.gif&quot;&gt;&lt;img src=&quot;http://gifyu.com/images/dynamic-browser-search.gif&quot; alt=&quot;ScreenShot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
        <link>/dynamic-browser-searching-text-from-vim-inside-a-vagrant-box</link>
        <guid isPermaLink="true">/dynamic-browser-searching-text-from-vim-inside-a-vagrant-box</guid>
        
        
        <category>vim</category>
        
        <category>search</category>
        
        <category>bash</category>
        
        <category>vagrant</category>
        
      </item>
    
      <item>
        <title>Resizing splits</title>
        <description>&lt;p&gt;One of the things I most like in VIM is the easy way to split its environment. Using VIM splits + &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlP&lt;/a&gt; + &lt;a href=&quot;http://en.wikipedia.org/wiki/Tmux&quot;&gt;tMux&lt;/a&gt; makes me a lot more productive.&lt;/p&gt;

&lt;p&gt;Sometimes I want to read a manual, a helper, a README, or even just want to read my code in ‚Äòfull screen‚Äô. This is how I do it:&lt;/p&gt;

&lt;p&gt;Maximize the current sprint in the vertical:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;ctrl &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;w&lt;/span&gt; _&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;ctrl + w means you have to press the key Ctrl and the key w at the same time and then release them to press the next key&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maximize the current sprint in the horizontal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;ctrl &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Resize all splits to be the same (also called ‚Äònormalize‚Äô)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;ctrl &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ask for help! VIM‚Äôs helper is pretty useful, let‚Äôs say you like the examples above and want to go further. I‚Äôd suggest that before you google it, you invest some time reading VIM‚Äôs help.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;help :split&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
        <link>/resizing-splits</link>
        <guid isPermaLink="true">/resizing-splits</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Lein Ring Server running in the background</title>
        <description>&lt;p&gt;I‚Äôve been working on a study case that has as a main target to run two different servers at the same time - one for the backend and the other for the frontend. &lt;a href=&quot;https://github.com/fellipebrito/front-back-case&quot; target=&quot;blank&quot;&gt;front-back-case&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to not lose time and type less, I‚Äôve been creating scenarios for every back/front server combination. So I can start and kill them with only one line. &lt;a href=&quot;https://github.com/fellipebrito/front-back-case/tree/master/bin&quot; target=&quot;blank&quot;&gt;Here are some of the scripts to start and kill servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, after I code a simple server in Clojure, I had to figure out how to start a ring server in the background. After few minutes looking for a solution I realised that I could do it using nohup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nohup lein ring server-headless &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
        <link>/lein-ring-server-running-in-the-background</link>
        <guid isPermaLink="true">/lein-ring-server-running-in-the-background</guid>
        
        
        <category>shell</category>
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Cross Origin Resource Sharing in Sinatra (ruby) and Ring (clojure) - CORS</title>
        <description>&lt;p&gt;Few weeks ago I started thinking about the idea of bigger layers of separation between the frontend and the backend. In my perfect world, I would create a project that would rely 100% of its dynamic content in an API that would have only one goal: &lt;strong&gt;talk to the database and return a JSON&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this perfect world, specifications would be the first thing to write. You sit down with the tech team, review the mockups, define the JSON the frontend needs, write it down and done! &lt;strong&gt;Frontend team will have its content mocked and ready to go, and backend team would have a perfect spec to return.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then the time to code came. I invested few hours coding two simple applications. One to handle the backend and another one to provide a simple HTML entry for my localhost. The backend server is both made in &lt;strong&gt;Sinatra and Clojure&lt;/strong&gt; I finished this task in few minutes. The next task was to make them talk to each other. BOOM!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;‚ÄúNo ‚ÄòAccess-Control-Allow-Origin‚Äô header is present on the requested resource‚Äù.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you want to step out all the explanation and jump direct to the code, here is the commit that saved my life: &lt;a href=&quot;https://github.com/fellipebrito/front-back-case/commit/5dede83ab8ae5ab320fe2041160c07e18e7f4b7e&quot; target=&quot;_blank&quot;&gt;Enables cross origin access&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The error above is the one I found on my chrome web development tool, and then after few clicks here and there, CORS came up to me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why  is CORS a problem?&lt;/strong&gt;
Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they‚Äôre limited by the same origin policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here is my problem:&lt;/strong&gt; I have two different sources, and I want them to talk through a SPA.&lt;/p&gt;

&lt;p&gt;Thankfully both Sinatra and Ring (for Clojure) offer us a solution for that: &lt;a href=&quot;https://github.com/britg/sinatra-cross_origin&quot; target=&quot;_blank&quot;&gt;Sinatra cross-origin&lt;/a&gt; - a Cross Origin Request Sharing extension for Sinatra and &lt;a href=&quot;https://github.com/r0man/ring-cors&quot; target=&quot;_blank&quot;&gt;Ring middleware for Cross-Origin Resource Sharing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sinatra&quot;&gt;Sinatra&lt;/h3&gt;
&lt;p&gt;Three steps:&lt;/p&gt;

&lt;p&gt;1) add the gem to your Gemfile&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra-cross_origin&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2) require it in your app&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sinatra/cross_origin&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3) enable it inside your app&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CrossOrigin&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cross_origin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ringclojure&quot;&gt;Ring/Clojure&lt;/h3&gt;
&lt;p&gt;Three steps:&lt;/p&gt;

&lt;p&gt;1) Add the dependence in project.clj&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-cors&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.1.6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2) require it in the handler&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring.middleware.cors&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wrap-cors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3) wrap the routes with it&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; from:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-defaults&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app-routes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;site-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;;; to:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-defaults&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app-routes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;site-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-cors&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:access-control-allow-origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://localhost:3000&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;ss&quot;&gt;:access-control-allow-methods&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:put&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;ss&quot;&gt;:access-control-allow-headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
        <link>/cross-origin-resource-sharing</link>
        <guid isPermaLink="true">/cross-origin-resource-sharing</guid>
        
        
        <category>javascript</category>
        
        <category>sinatra</category>
        
        <category>ruby</category>
        
        <category>clojure</category>
        
        <category>ring</category>
        
        <category>ajax</category>
        
      </item>
    
      <item>
        <title>How to list all files larger/smaller than certain size</title>
        <description>&lt;p&gt;If you want to list all flac files smaller than 12mb:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.flac&amp;quot;&lt;/span&gt; -size -12000k&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to list files bigger than, just change the¬†&lt;strong&gt;-¬†&lt;/strong&gt;for a¬†&lt;strong&gt;+&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.flac&amp;quot;&lt;/span&gt; -size +12000k&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you want to delete them, just add a -delete after that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.flac&amp;quot;&lt;/span&gt; -size -12000k -delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
        <link>/how-to-list-all-files-largersmaller-than-certain-size</link>
        <guid isPermaLink="true">/how-to-list-all-files-largersmaller-than-certain-size</guid>
        
        
        <category>bash</category>
        
        <category>ubuntu</category>
        
      </item>
    
      <item>
        <title>How to update my remote branch information</title>
        <description>&lt;p&gt;To clean-up your remote references:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote prune origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to clean up your local mess, you also can use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch -r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
        <link>/how-to-update-my-remote-branch-information</link>
        <guid isPermaLink="true">/how-to-update-my-remote-branch-information</guid>
        
        
        <category>git</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Fatal error while bundling capybara-webkit</title>
        <description>&lt;p&gt;The error:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Fatal error &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; bundling capybara-webkit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.10.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with native extensions&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How to fix:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install qt4
gem install capybara-webkit -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.1.0&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you need further information read &lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôre welcome.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
        <link>/fatal-error-while-bundling-capybara-webkit</link>
        <guid isPermaLink="true">/fatal-error-while-bundling-capybara-webkit</guid>
        
        
        <category>capybara</category>
        
        <category>cucumber</category>
        
        <category>ruby</category>
        
        <category>terminal</category>
        
        <category>unix</category>
        
      </item>
    
      <item>
        <title>How to set your unix default editor</title>
        <description>&lt;p&gt;I can‚Äôt count how many times in the past I had troubles with unix complaining I don‚Äôt have a default editor.&lt;/p&gt;

&lt;p&gt;To fix this issue is ridiculously simple: just edit your¬†&lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot; target=&quot;_blank&quot;&gt;bashrc&lt;/a&gt;¬†and add this line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate>
        <link>/how-to-set-your-unix-default-editor</link>
        <guid isPermaLink="true">/how-to-set-your-unix-default-editor</guid>
        
        
        <category>alias</category>
        
        <category>terminal</category>
        
        <category>ubuntu</category>
        
        <category>unix</category>
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Be more productive with TMUXINATOR</title>
        <description>&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://f.cloud.github.com/assets/141213/916084/065fef7c-fe82-11e2-9c23-a9622c7d83c3.png&quot; width=&quot;2560&quot; height=&quot;1440&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot; target=&quot;_blank&quot;&gt;TMUXINATOR&lt;/a&gt;¬†is a¬†&lt;a href=&quot;http://en.wikipedia.org/wiki/Tmux&quot; target=&quot;_blank&quot;&gt;TMUX&lt;/a&gt;¬†session manager; &lt;a href=&quot;http://en.wikipedia.org/wiki/Tmux&quot; target=&quot;_blank&quot;&gt;TMUX&lt;/a&gt;¬†is a software that lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more. See¬†&lt;a href=&quot;http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;amp;sektion=1&quot; target=&quot;_blank&quot;&gt;the manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;br /&gt;
-¬†&lt;a href=&quot;http://code.fellipebrito.com/2014/02/how-to-set-your-unix-default-editor/&quot; target=&quot;_blank&quot;&gt;Define your bash $EDITOR&lt;/a&gt;;&lt;br /&gt;
- &lt;a href=&quot;http://rvm.io/rvm/install&quot; target=&quot;_blank&quot;&gt;Ruby installed&lt;/a&gt;&lt;br /&gt;
- TMUX 1.8+ installed, if you have any troubled installing this version in your Ubuntu &lt;a href=&quot;http://askubuntu.com/a/324949&quot; target=&quot;_blank&quot;&gt;you can follow these tips&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot; target=&quot;_blank&quot;&gt;TMUXINATOR&lt;/a&gt;¬†is a rubygem, to install it is easy:&lt;/p&gt;

&lt;pre title=&quot;TMUXINATOR gem install&quot;&gt;gem install tmuxinator&lt;/pre&gt;

&lt;p&gt;After you install it you can start a new project using:&lt;/p&gt;

&lt;pre&gt;tmuxinator open my_project&lt;/pre&gt;

&lt;p&gt;This command will open a YAML file inside your default editor (that I wish to be VIM):&lt;/p&gt;

&lt;pre title=&quot;TMUXINATOR config file&quot;&gt;# ~/.tmuxinator/my_project.yml

name: my_project
root: ~/

# Runs before everything. Use it to start daemons etc.
# pre: sudo /etc/rc.d/mysqld start

windows:
  - editor:
      layout: main-vertical
      panes:
        - vim
        - rspec
  - server: bundle exec rails s
  - logs: tail -f logs/development.log&lt;/pre&gt;

&lt;p&gt;If you only read this file you will be amazed with all the possibilities it gives to you. This basic config file is really useful if you work with a Rails project. It gives to you three windows ( rspec and editor, server and log reader ) ready to dive in code.&lt;span style=&quot;line-height: 1.5;&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Well, with this file saved you can start your day typing:&lt;/p&gt;

&lt;pre title=&quot;Starting TMUX&quot;&gt;mux start meu_projeto&lt;/pre&gt;

&lt;p&gt;That‚Äôs it, your whole dev environment is active and ready to rumble. You can configure it as you wish: you need a ssh connection, new editors, a database window, top, capistrano? You can do it and much more, explore its manual and you will see how powerful it is.&lt;/p&gt;

&lt;p&gt;You can also share its .conf with your team and avoid those 15 minutes every developer loses to start to code in the morning.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs do a simple math. Saving 15 minutes everyday * 20 days you &lt;strong&gt;save 5 hours of work per month per developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now multiply this ‚Äúsave time‚Äù * your dev team (8 devs?!?). You are saving A WEEK of time and money with this simple config file.&lt;/p&gt;

&lt;p&gt;Cheers to productivity and money saved!&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate>
        <link>/2014/02/be-more-productive-with-tmuxinator/</link>
        <guid isPermaLink="true">/2014/02/be-more-productive-with-tmuxinator/</guid>
        
        
        <category>alias</category>
        
        <category>ruby</category>
        
        <category>terminal</category>
        
        <category>tmux</category>
        
        <category>tmuxinator</category>
        
        <category>ubuntu</category>
        
        <category>unix</category>
        
      </item>
    
      <item>
        <title>Saving time and avoiding keystrokes</title>
        <description>&lt;p&gt;Our brains are incredibly fast, as well as our computers. We should not decrease this speed, with our slow fingers or too many keystrokes.¬†&lt;strong&gt;It is important to avoid unnecessary typing.¬†&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One way to do that is &lt;strong&gt;creating some aliases&lt;/strong&gt; on the shell, which improves our speed but also avoids some good amount of keystrokes, ¬†saving your health in the long term.&lt;/p&gt;

&lt;p&gt;Please, do some simple math with me: if you type¬†&lt;em&gt;‚Äògit status‚Äô&lt;/em&gt;¬†20 times a day, it is 100 times per week, 400 times per month and ~5000 times per year.&lt;br /&gt;
In a professional lifetime, you‚Äôd type these 10 keystrokes, &amp;gt; 100.000 times,¬†¬†which gives us an incredible mark of &lt;strong&gt;1 MILLION keystrokes just to know what has changed in our code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I use¬†&lt;em&gt;‚Äògst‚Äô&lt;/em&gt; as an alias. It &lt;strong&gt;saves me 7 keystrokes per time&lt;/strong&gt;, which is &amp;gt; 60% of the total keystrokes. We can say that I will avoid more than &lt;strong&gt;500.000 keystrokes in my dev lifetime&lt;/strong&gt; (20 years?!?). ¬†And it is only one of my aliases.&lt;/p&gt;

&lt;p&gt;So you can ask me to share ¬†my aliases with you, and I‚Äôd gladly do that, actually, take a look on my dotfiles here (&lt;a href=&quot;https://github.com/fellipebrito/dotfiles&quot; target=&quot;_blank&quot;&gt;https://github.com/fellipebrito/dotfiles&lt;/a&gt;)¬†however keep in mind that they are my customized alias, of course you can use that, but it would be better to know which commands you use often, would not it?&lt;/p&gt;

&lt;p&gt;In order to help you (and help me) I am always watching screencasts and trying to capture new stuff that good developers are doing out there (You also might go to github, read ¬†a bunch of public repositories, it is a great way to learn a lot with those guys), so &lt;a href=&quot;http://codeulate.com/&quot; target=&quot;_blank&quot;&gt;Ben Orenstein&lt;/a&gt;¬†came up with this idea in his &lt;a href=&quot;http://goruco.com/&quot; target=&quot;_blank&quot;&gt;GoRuCo&lt;/a&gt;¬†conference (and he also confirms he did not create that but grabbed it from the internet). (&lt;em&gt;if you are humble and smart enough you will see that you can learn a lot with the content that is already out there and ¬†you can accept that at least 70% of what you code was inspired or copied from something else.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Well, less talk more code. If you want to know which aliases you should create, to know which are your top 20 most recurrent commands on the terminal, just use this command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{a[$2]++}END{for(i in a){print a[i] &amp;quot; &amp;quot; i}}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -20
&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; ls
&lt;span class=&quot;m&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;49&lt;/span&gt; git
&lt;span class=&quot;m&quot;&gt;43&lt;/span&gt; vim
&lt;span class=&quot;m&quot;&gt;28&lt;/span&gt; vagrant
&lt;span class=&quot;m&quot;&gt;19&lt;/span&gt; vup
&lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; cat
&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fg&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; open
&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; rm
&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; l
&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; which
&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; brew
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; sudo
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; mkdir
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; reset
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; ping&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
        <link>/saving-time-and-avoiding-keystrokes</link>
        <guid isPermaLink="true">/saving-time-and-avoiding-keystrokes</guid>
        
        
        <category>alias</category>
        
        <category>terminal health</category>
        
      </item>
    
  </channel>
</rss>
